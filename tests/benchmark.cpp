#include <iostream>
#include <benchmark/benchmark.h>

#include <iostream>
#include <vector>
#include "../src/AES.h"

static void AES_EncryptECB(benchmark::State& state) {

  Cipher::AES crypt(256);

  for (auto _ : state)
  {
    unsigned char plain[] = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff };
    unsigned char key[] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
    unsigned char right[] = { 0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x04, 0x30, 0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a };
    unsigned int len = 0;
    unsigned char *out = crypt.EncryptECB(plain, 16, key, len);
  }
}
BENCHMARK(AES_EncryptECB);

static void AES_EncryptCBC(benchmark::State& state) {

  Cipher::AES crypt(256);

  for (auto _ : state)
  {
    unsigned char plain[] = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff };
    unsigned char iv[] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };
    unsigned char key[] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11,
      0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f };
    unsigned int len;
    
    unsigned char *out = crypt.EncryptCBC(plain, 16, key, iv, len);
    unsigned char *innew = crypt.DecryptCBC(out, 16, key, iv);
  }
}
BENCHMARK(AES_EncryptCBC);


BENCHMARK_MAIN();
